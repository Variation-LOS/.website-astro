---
import Container from "src/components/container.astro";
import Layout from "src/layouts/Layout.astro";
import { getCollection } from "astro:content";

// 获取 devices 目录下的 Markdown 文件
const publishedDevices = await getCollection("devices", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

const teamMembers = await getCollection("team", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

const maintainerMap = new Map();
teamMembers.forEach((member) => {
  maintainerMap.set(member.data.name, member.data);
});

// 按设备品牌分类
const devicesByBrand = {};
publishedDevices.forEach((device) => {
  const brand = device.data.brand;
  if (!devicesByBrand[brand]) {
    devicesByBrand[brand] = [];
  }
  devicesByBrand[brand].push(device);
});
---

<Layout title="Get Started">
  <Container>
    <div class="title">
      <svg
        height="32"
        viewBox="0 0 121 37"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          id="Bun"
          d="M26.3514 18.501C30.8425 18.7287 34.4139 22.4425 34.4139 26.9902C34.4139 31.6847 30.6084 35.4902 25.9139 35.4902H8.91394C4.21952 35.4902 0.41394 31.6847 0.41394 26.9902C0.41394 22.2958 4.21952 18.4902 8.91394 18.4902C4.21952 18.4902 0.41394 14.6847 0.41394 9.99023C0.41394 5.29581 4.21952 1.49023 8.91394 1.49023H25.9139C30.6084 1.49023 34.4139 5.29581 34.4139 9.99023C34.4139 14.6847 30.6084 18.4902 25.9139 18.4902L26.3514 18.501Z"
          fill="var(--md-sys-color-on-secondary-container)"></path>
        <path
          id="Sunny"
          d="M60.4159 0.491334C61.9158 0.505109 63.1056 1.64998 65.4852 3.9386V3.9386C65.8667 4.30544 66.3685 4.51974 66.8974 4.53881C66.9796 4.54178 67.0617 4.54482 67.1434 4.54797C70.4381 4.67516 72.086 4.73956 73.1376 5.81067C74.1889 6.88179 74.2223 8.53232 74.2889 11.8331V11.8331C74.3007 12.4182 74.5312 12.9764 74.9369 13.3981C74.9602 13.4224 74.9835 13.4466 75.0067 13.4708C77.2664 15.8267 78.3959 17.0048 78.411 18.505C78.4261 20.0051 77.3287 21.1973 75.1327 23.5812C75.0503 23.6706 74.9672 23.7603 74.8838 23.8503C74.5106 24.2522 74.301 24.777 74.2899 25.3253V25.3253C74.2242 28.5889 74.1917 30.2214 73.1425 31.2921C72.0932 32.3626 70.4741 32.428 67.2362 32.5587C67.2183 32.5594 67.2004 32.5602 67.1825 32.5609C66.533 32.5866 65.9153 32.8428 65.4374 33.2833V33.2833C63.1181 35.421 61.9582 36.4896 60.4843 36.4894C59.0102 36.4891 57.8503 35.4196 55.5311 33.2804V33.2804C55.0586 32.8445 54.4473 32.5903 53.8049 32.5647C53.716 32.5611 53.6273 32.5575 53.5389 32.5538C50.3873 32.423 48.8112 32.3578 47.7684 31.3146C46.7256 30.2713 46.6614 28.6947 46.5321 25.5421V25.5421C46.4989 24.732 46.1791 23.9601 45.6301 23.3634C45.6166 23.3487 45.6032 23.3341 45.5897 23.3195C43.4737 21.0178 42.4156 19.8674 42.4139 18.3937C42.4124 16.9199 43.4596 15.7748 45.5555 13.4855C45.6378 13.3956 45.7206 13.3054 45.8038 13.2148C46.2485 12.7311 46.5079 12.1058 46.535 11.4493V11.4493C46.664 8.32545 46.7282 6.76336 47.7684 5.72083C48.8087 4.67829 50.3592 4.61135 53.4598 4.47669C53.57 4.4719 53.6806 4.4673 53.7917 4.46282C54.3493 4.44034 54.8797 4.21937 55.2889 3.83997V3.83997C57.7067 1.59857 58.9161 0.477703 60.4159 0.491334Z"
          fill="var(--md-sys-color-on-primary-container)"></path>
        <path
          id="4-leaf clover"
          d="M110.495 1.49023C115.972 1.49029 120.411 5.93058 120.411 11.4073C120.411 14.1825 119.27 16.6899 117.432 18.4897C119.27 20.2897 120.411 22.7976 120.411 25.5732C120.411 31.0499 115.972 35.4892 110.495 35.4892C107.719 35.4892 105.211 34.3481 103.411 32.5104C101.611 34.348 99.103 35.4902 96.3275 35.4902C90.8508 35.49 86.4111 31.0498 86.4111 25.5732C86.4112 22.7977 87.5524 20.2897 89.3901 18.4897C87.5526 16.6898 86.4111 14.1816 86.4111 11.4063C86.4114 5.92991 90.8509 1.49048 96.3275 1.49023C99.1029 1.49023 101.611 2.63166 103.411 4.46908C105.211 2.63159 107.719 1.49023 110.495 1.49023Z"
          fill="var(--md-sys-color-on-secondary-container)"></path>
      </svg>

      <h1>Get Started</h1>
      <p>
        Welcome to the Variation! Select your device and download to continue
      </p>
    </div>
    <div class="aside">
      <aside>
        <nav class="page-toc">
          <h3 class="toc-title">
            <p class="toc-p">NAVGIATION</p>Choose <br />Your <br />Brand
          </h3>
          <ul>
            {
              Object.keys(devicesByBrand).map((brand) => (
                <li>
                  <a href={`#${brand}`} data-target={brand}>
                    {brand}
                  </a>
                </li>
              ))
            }
          </ul>
          <span class="ul-highlight" style="opacity: 0;"></span>
        </nav>
      </aside>
    </div>
    <!-- 按品牌分类显示设备列表 -->
    <!-- {
      Object.entries(devicesByBrand).map(([brand, devices]) => (
        <div>
          <h2 id={brand}>{brand}</h2>
          <div class="device-list">
            {devices.map((deviceEntry) => (
              <div class="device-item">
                <img src={deviceEntry.data.image} alt={deviceEntry.data.name} />
                <h3 class="device-name">
                  <p class="device-codename">{deviceEntry.data.codename}</p>
                  {deviceEntry.data.name}
                </h3>
                <p class="device-maintainer">
                  Maintainer: {deviceEntry.data.maintainer}
                </p>
              </div>
            ))}
          </div>
        </div>
      ))
    } -->
    {
      Object.entries(devicesByBrand).map(([brand, devices]) => (
        <main>
          <h2 id={brand}>{brand}</h2>
          <div class="device-list">
            {devices.map((deviceEntry) => (
              <div
                class="device-item"
                style={`background-image: linear-gradient(to right, color-mix(in srgb, var(--md-sys-color-surface-container) 100%,transparent) 0%, color-mix(in srgb, var(--md-sys-color-surface-container) 50%,transparent) 100%), url(${deviceEntry.data.image});`}>
                <div class="device-info">
                  <h3 class="device-name">
                    <p class="device-codename">{deviceEntry.data.codename}</p>
                    {deviceEntry.data.name}
                  </h3>
                  <p class="device-maintainer">
                    by
                    {maintainerMap.has(deviceEntry.data.maintainer) && (
                      <>
                        <img
                          src={
                            maintainerMap.get(deviceEntry.data.maintainer)
                              .avatar.src
                          }
                          alt={
                            maintainerMap.get(deviceEntry.data.maintainer)
                              .avatar.alt
                          }
                          width="20"
                          height="20"
                          class="maintainer-avatar"
                        />
                        {deviceEntry.data.maintainer}
                      </>
                    )}
                    {!maintainerMap.has(deviceEntry.data.maintainer) &&
                      deviceEntry.data.maintainer}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </main>
      ))
    }

    <style>
      :root {
        --highlight-top: 0px;
      }

      main {
        display: flex;
        flex-direction: column;
        max-width: 1440px;
        padding-left: 172px;
      }

      .device-info {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: flex-start;
        height: 100%;
      }

      img.maintainer-avatar {
        border-radius: 50%;
      }

      .page-toc h2 {
        font-size: 24px;
        margin-top: 20px;
      }

      .page-toc ul {
        list-style-type: none;
        padding-left: 0;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: flex-start;
        gap: 4px;
      }

      .page-toc li {
        width: 100%;
        min-height: 36px;
        max-height: 36px;
      }

      .page-toc a {
        color: color-mix(
          in srgb,
          var(--md-sys-color-on-background) 75%,
          transparent
        );
        text-decoration: none;
        transition: all 0.3s ease-in-out;
        padding: 6px 10px;
        min-height: 36px;
        max-height: 36px;
        width: 100%;
        box-sizing: border-box;
        border-radius: 14px;
        display: block;
      }

      .page-toc a.active {
        color: var(--md-sys-color-primary);
        font-weight: bold;
      }

      .page-toc li:hover a {
        color: color-mix(
          in srgb,
          var(--md-sys-color-on-background) 100%,
          transparent
        );
        background-color: var(--md-sys-color-surface-container-low);
      }

      .toc-p {
        font-size: 14px;
        font-weight: 600;
        margin: 0;
        color: var(--md-sys-color-on-background);
        margin-bottom: 6px;
        opacity: 0.5;
      }

      .toc-title {
        font-size: 26px;
        line-height: 28px;
        font-weight: 600;
        margin: 0;
        color: var(--md-sys-color-on-background);
        margin-bottom: 16px;
        padding: 10px;
        padding-top: 4px;
        user-select: none;
      }

      .ul-highlight {
        position: absolute;
        top: calc(var(--highlight-top) + 36px);
        width: calc(100% - 4px);
        height: calc(36px - 4px);
        border: solid 2px var(--md-sys-color-primary);
        border-radius: 14px;
        pointer-events: none;
        transition: top 0.3s ease-in-out;
      }

      aside {
        max-width: 164px;
        width: 100%;
        padding-top: 36px;
      }

      .device-list {
        display: grid;
        gap: 20px;
        margin-top: 20px;
      }

      @media (max-width: 480px) {
        div.aside {
          position: static;
          height: fit-content;
          width: 100%;
        }

        aside {
          width: 100%;
          max-width: none;
          padding-top: 0;
          padding: 0 10px;
          box-sizing: border-box;
        }

        .toc-title br {
          display: none;
        }

        main {
          padding-left: 0;
        }

        .ul-highlight {
          display: none;
        }

        .title p {
          text-align: center;
        }

        .page-toc ul {
          margin-bottom: 0;
        }

        .toc-title {
          padding: 0px;
        }

        .page-toc a,
        .page-toc a.active {
          color: var(--md-sys-color-on-background);
          text-decoration: none;
          transition: all 0.3s ease-in-out;
          padding: 8px 0px;
          min-height: 36px;
          max-height: 36px;
          width: 100%;
          box-sizing: border-box;
          border-radius: 0;
          display: block;
          font-weight: 500;
          opacity: 0.75;
        }

        .page-toc a:hover {
          opacity: 1;
          background-color: transparent !important;
        }

        .toc-p {
          letter-spacing: 2px;
        }

        main {
          padding: 0 10px;
        }
      }

      @media (min-width: 768px) {
        .device-list {
          grid-template-columns: repeat(2, minmax(0, 1fr));
        }
      }

      @media (min-width: 1440px) {
        .device-list {
          grid-template-columns: repeat(3, minmax(0, 1fr));
        }
      }

      .device-item {
        padding: 24px;
        border-radius: 14px;
        background-color: var(--md-sys-color-surface-container);
        background-size: 196px;
        background-position: top 24px right 10px;
        background-repeat: no-repeat;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;
        overflow: hidden;
        transition: all 0.5s var(--m3e-sys-tramsition-in);
        height: 164px;
        box-sizing: border-box;
        border: 1px solid var(--md-sys-color-outline-variant);
      }

      .device-item:hover {
        background-color: var(--md-sys-color-surface-container);
        background-position: top 16px right 10px;
        transition: all 0.5s var(--m3e-sys-tramsition-out);
        transform: translateY(-4px);
      }

      .device-name {
        font-size: 26px;
        font-family: var(--title-font);
        line-height: 32px;
        color: var(--md-sys-color-on-background);
        margin: 0;
      }

      .device-codename,
      .device-maintainer {
        font-size: 16px;
        line-height: 24px;
        color: var(--md-sys-color-on-surface-variant);
        margin: 0;
      }

      .device-maintainer {
        display: flex;
        align-items: center;
        flex-direction: row;
        gap: 6px;
      }

      .device-codename {
        text-transform: uppercase;
        letter-spacing: 2px;
        font-size: 15px;
      }

      h1 {
        font-size: 38px;
        font-weight: 500;
        margin: 0;
        letter-spacing: -1px;
      }

      h2 {
        font-size: 32px;
        font-weight: 500;
        margin: 0;
        margin-top: 60px;
        scroll-margin-top: 60px;
      }

      h3 {
        font-size: 24px;
        font-weight: 500;
        margin: 10px 0;
      }

      p {
        margin: 0;
        margin-top: 0;
        font-size: 16px;
      }

      .title {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        margin: 64px 0;
      }

      .title h1 {
        font-size: 54px;
        line-height: 1;
        font-weight: 500;
        margin: 0;
        letter-spacing: var(--title-font-letterspace) !important;
        border: none;
        padding: 0 14px;
        padding-top: 0;
        text-align: center;
      }

      body {
        padding-bottom: 256px;
      }
    </style>
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const headers = document.querySelectorAll("h2");
        const navLinks = document.querySelectorAll(".page-toc a");
        const highlight = document.querySelector(".ul-highlight");
        const nav = document.querySelector(".page-toc");
        const headerOffset = 60;

        function updateHighlightPosition(activeLink) {
          if (activeLink && nav) {
            const navRect = nav.getBoundingClientRect();
            const linkRect = activeLink.getBoundingClientRect();
            const relativeTop = linkRect.top - navRect.top;
            document.documentElement.style.setProperty(
              "--highlight-top",
              `${relativeTop}px`,
            );
            highlight.style.opacity = 1;
          }
        }

        function setActiveLink(targetId) {
          navLinks.forEach((link) => link.classList.remove("active"));
          const activeLink = document.querySelector(
            `.page-toc a[data-target="${targetId}"]`,
          );
          if (activeLink) {
            activeLink.classList.add("active");
            updateHighlightPosition(activeLink);
          }
        }

        function isElementInViewport(el) {
          const rect = el.getBoundingClientRect();
          return (
            rect.top <= window.innerHeight * 0.7 &&
            rect.bottom >= window.innerHeight * 0.3
          );
        }

        function findActiveHeader() {
          let activeHeader = null;
          let smallestDistance = Infinity;

          headers.forEach((header) => {
            const rect = header.getBoundingClientRect();
            // 调整判断位置，考虑headerOffset
            const distance = Math.abs(
              rect.top - headerOffset - window.innerHeight * 0.2,
            );

            if (distance < smallestDistance) {
              smallestDistance = distance;
              activeHeader = header;
            }
          });

          return activeHeader;
        }

        function handleScroll() {
          // 添加一个小延迟，等待滚动动画完成
          setTimeout(() => {
            const isBottom =
              window.innerHeight + window.scrollY >=
              document.documentElement.scrollHeight - 100;

            if (isBottom) {
              const lastHeader = headers[headers.length - 1];
              if (lastHeader) {
                setActiveLink(lastHeader.id);
              }
            } else {
              const activeHeader = findActiveHeader();
              if (activeHeader) {
                setActiveLink(activeHeader.id);
              }
            }
          }, 50);
        }

        function scrollToHeader(targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const targetPosition =
              targetElement.getBoundingClientRect().top + window.scrollY;
            // 减去头部偏移量，确保标题完全可见
            window.scrollTo({
              top: targetPosition - headerOffset,
              behavior: "smooth",
            });

            // 立即更新高亮，不等待滚动完成
            setActiveLink(targetId);
          }
        }

        function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        const debouncedScroll = debounce(handleScroll, 100);

        window.addEventListener("scroll", debouncedScroll);
        window.addEventListener("resize", debouncedScroll);

        // 初始化时检查URL hash并滚动
        if (window.location.hash) {
          const targetId = window.location.hash.substring(1);
          setTimeout(() => scrollToHeader(targetId), 100);
        } else {
          handleScroll();
        }

        // 修改点击事件处理
        navLinks.forEach((link) => {
          link.addEventListener("click", (e) => {
            e.preventDefault();
            const targetId = link.getAttribute("data-target");
            scrollToHeader(targetId);
            setTimeout(() => {
              window.location.hash = targetId;
            }, 1000);
            // window.location.href = `#${targetId}`;
          });
        });
      });
    </script>
  </Container>
</Layout>
